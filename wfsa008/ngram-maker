
#=====================================================================
# builds a carmel ngram model, result on standard output.
# 
# arg1: training file
# arg2: how many lines of training file to use
# arg3: smoothing file
# arg4: n
# arg5: ngram order above which to prune singletons
#
#=====================================================================

CARMEL=/nfs/nlg/tools/graehl/cage/bin/carmel.static

cat $1 |
head -$2 |
tr 'a-z' 'A-Z' | 
tr -d '"' |
gawk 'NF>0' |
sed 's/^/0S0 /' |
sed 's/$/ 0E0/' | 
gawk '{for (i=1; i<='$4'; i++)
       for (j=1; j<=(NF-i+1); j++) {
         for (k=j; k<=(j+i-1); k++)
           printf("%s ", $k);
         printf("\n")}}' | 
sort -T /tmp -S 2g | uniq -c |
gawk 'BEGIN {printf("0E0-\n(0S0- (000 *e* *e* 1.0))\n")}
    {m = (NF-1);
     if (m==1) back=0.95;
     else if (m==2) back=0.9; 
     else if (m==3) back=0.8;
     else if (m==4) back=0.7; 
     else if (m==5) back=0.6;
     else back=0.21;
     # printf("=== %s ===========\n",$0);
     if (($1 > 1) || (m < '$5')) {
       if ((m==1) && ($2 != "0E0")) {
         printf("(%s- (%s-pr *e* *e* 0.95!))\n",$2,$2);
         printf("(%s- (NULL *e* *e* 0.05!))\n",$2)}
       if ((m==1) && ($2 != "0S0")) {
         if ($2 == "0E0")
           printf("(NULL (%s- *e* *e* %20.10f))\n",$2,$1/100000000);
	 else 
           printf("(NULL (%s- *e* \"%s\" %20.10f))\n",$2,$2,$1/100000000)}
       if (m>1) {
         printf("(");
         for (k=2; k<=m; k++) printf("%s-", $k);
         printf("pr (");
	 if (m<'$4') printf("%s-",$2);
         for (k=3; k<=(m+1); k++) printf("%s-", $k);
         if ($NF=="0E0")
           printf(" *e* *e* %20.10f))\n",$1/100000000);
         else 
	   printf(" *e* \"%s\" %20.10f))\n",$NF,$1/100000000)}
       if ((m>1) && (m<'$4')) {
         printf("(");
         for (k=2; k<=(m+1); k++) printf("%s-", $k);
         printf(" (");
         for (k=2; k<=(m+1); k++) printf("%s-", $k);
         printf("pr *e* *e* %4.2f!))\n",back);
         printf("(");
         for (k=2; k<=(m+1); k++) printf("%s-", $k);
         printf(" (");
         for (k=3; k<=(m+1); k++) printf("%s-", $k);
         printf(" *e* *e* %4.2f!))\n",1.0-back)}}}' |
$CARMEL -sJHn |
sed 's/))/!))/' | 
sed 's/0.95!!/0.95!1/' |
sed 's/0.9!!/0.9!2/' |
sed 's/0.8!!/0.8!3/' |
sed 's/0.7!!/0.7!4/' |
sed 's/0.6!!/0.6!5/' |
sed 's/0.21!!/0.2!6/' |
sed 's/0.05!!/0.05!7/' |
sed 's/0.1!!/0.1!8/' |
sed 's/0.2!!/0.2!9/' |
sed 's/0.3!!/0.3!10/' |
sed 's/0.4!!/0.4!11/' |
sed 's/0.79!!/0.8!12/' > zz
$CARMEL -HJtM 10 $3 zz | 
$CARMEL -sHJN 0

